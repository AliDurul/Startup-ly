// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    runtime  = "vercel-edge"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    startups      Startup[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

// model Author {
//   id        Int       @id
//   name      String
//   username  String    @unique
//   email     String    @unique
//   image     String
//   bio       String
//   startups  Startup[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   @@index([id, username])
// }

model Startup {
    id          String    @id @default(uuid())
    title       String
    slug        String
    description String
    category    String
    image       String
    pitch       String
    views       Int       @default(0)
    author      User      @relation(fields: [authorId], references: [id])
    authorId    String
    playlist    Playlist? @relation(fields: [playlistId], references: [id])
    playlistId  String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([id, title, slug])
}

model Playlist {
    id        String    @id @default(uuid())
    title     String
    slug      String
    startups  Startup[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([id, slug])
}
